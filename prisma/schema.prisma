// This is your Prisma schema file.
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------------------------------------
// Module 1: User Management
// ---------------------------------------------

model User {
  user_id       Int      @id @default(autoincrement())
  username      String   @unique
  password_hash String
  role_id       Int
  created_at    DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  role Role @relation(fields: [role_id], references: [role_id])

  // Reverse Relations
  reading_sessions    ReadingSession[]
  events_logbook      EventsLogbook[]
  price_schemes_set   PriceScheme[]
  efficiency_targets  EfficiencyTarget[]
  alerts_acknowledged Alert[]

  @@map("USERS")
}

model Role {
  role_id   Int      @id @default(autoincrement())
  role_name RoleName @unique

  // Reverse Relations
  users User[]

  @@map("ROLES")
}

enum RoleName {
  Technician
  Admin
  SuperAdmin
}

// ---------------------------------------------
// Module 2: Asset & Energy Master Data
// ---------------------------------------------

model EnergyType {
  energy_type_id      Int    @id @default(autoincrement())
  /// Example: 'Electricity', 'Water', 'Fuel'
  type_name           String @unique
  /// Example: 'kWh', 'm3', 'Liter'
  unit_of_measurement String

  // Reverse Relations
  meters             Meter[]
  reading_types      ReadingType[]
  price_schemes      PriceScheme[]
  efficiency_targets EfficiencyTarget[]

  @@map("ENERGY_TYPES")
}

model Meter {
  meter_id       Int         @id @default(autoincrement())
  meter_code     String      @unique
  location       String?
  status         MeterStatus @default(Active)
  energy_type_id Int

  // Relations
  energy_type EnergyType @relation(fields: [energy_type_id], references: [energy_type_id])

  // Reverse Relations
  reading_sessions ReadingSession[]

  @@map("METERS")
}

enum MeterStatus {
  Active
  UnderMaintenance
  Inactive
}

// ---------------------------------------------
// Module 3: Reading Records (Flexible Structure)
// ---------------------------------------------

/// This table records 'when' and 'by whom' a reading was taken.
model ReadingSession {
  session_id           Int      @id @default(autoincrement())
  /// Timestamp lengkap dengan jam dan menit saat pencatatan
  timestamp            DateTime
  /// [BARU] Kolom khusus untuk tanggal saja, untuk memastikan keunikan harian
  reading_date         DateTime @db.Date
  meter_id             Int
  user_id              Int
  /// Reference to another session_id if this is a correction
  is_correction_for_id Int?     @unique

  // Relations
  user  User  @relation(fields: [user_id], references: [user_id])
  meter Meter @relation(fields: [meter_id], references: [meter_id])

  // Correction Relation (Self-referencing)
  correction_for ReadingSession? @relation("CorrectionRelation", fields: [is_correction_for_id], references: [session_id])
  corrected_by   ReadingSession? @relation("CorrectionRelation")

  // Reverse Relations
  details ReadingDetail[]

  /// [BARU] Aturan ini memastikan kombinasi meter_id dan reading_date harus unik.
  @@unique([meter_id, reading_date], name: "unique_meter_reading_per_day")
  @@map("READING_SESSIONS")
}

/// This table defines the possible types of readings for an energy type.
model ReadingType {
  reading_type_id Int    @id @default(autoincrement())
  /// Example: 'Main', 'Peak', 'OffPeak', 'kVArh'
  type_name       String @unique
  energy_type_id  Int

  // Relations
  energy_type EnergyType @relation(fields: [energy_type_id], references: [energy_type_id])

  // Reverse Relations
  details ReadingDetail[]

  @@map("READING_TYPES")
}

/// This table records 'what' and 'how much' was read in a session.
model ReadingDetail {
  detail_id       Int     @id @default(autoincrement())
  session_id      Int
  reading_type_id Int
  value           Decimal @db.Decimal(12, 2)

  // Relations
  session      ReadingSession @relation(fields: [session_id], references: [session_id])
  reading_type ReadingType    @relation(fields: [reading_type_id], references: [reading_type_id])

  @@map("READING_DETAILS")
}

// ---------------------------------------------
// Module 4: Other Operations
// ---------------------------------------------

model PaxData {
  pax_id    Int      @id @default(autoincrement())
  data_date DateTime @unique @db.Date
  total_pax Int

  @@map("PAX_DATA")
}

model EventsLogbook {
  event_id            Int      @id @default(autoincrement())
  event_timestamp     DateTime
  notes               String   @db.Text
  reported_by_user_id Int

  // Relations
  reported_by User @relation(fields: [reported_by_user_id], references: [user_id])

  @@map("EVENTS_LOGBOOK")
}

// ---------------------------------------------
// Module 5: Price Management
// ---------------------------------------------

model PriceScheme {
  scheme_id      Int      @id @default(autoincrement())
  scheme_name    String   @unique
  effective_date DateTime @db.Date
  is_active      Boolean  @default(true)
  energy_type_id Int
  set_by_user_id Int

  // Relations
  energy_type EnergyType @relation(fields: [energy_type_id], references: [energy_type_id])
  set_by_user User       @relation(fields: [set_by_user_id], references: [user_id])

  // Reverse Relations
  rates SchemeRate[]

  @@map("PRICE_SCHEMES")
}

model SchemeRate {
  rate_id   Int      @id @default(autoincrement())
  rate_name String
  rate_type RateType
  value     Decimal  @db.Decimal(12, 4)
  scheme_id Int

  // Relations
  scheme PriceScheme @relation(fields: [scheme_id], references: [scheme_id])

  @@map("SCHEME_RATES")
}

enum RateType {
  PerUnit
  Percentage
}

// ---------------------------------------------
// Module 6: Target & Performance Management
// ---------------------------------------------

model EfficiencyTarget {
  target_id      Int      @id @default(autoincrement())
  kpi_name       String
  target_value   Decimal  @db.Decimal(10, 2)
  period_start   DateTime @db.Date
  period_end     DateTime @db.Date
  energy_type_id Int
  set_by_user_id Int

  // Relations
  energy_type EnergyType @relation(fields: [energy_type_id], references: [energy_type_id])
  set_by_user User       @relation(fields: [set_by_user_id], references: [user_id])

  // Reverse Relations
  alerts Alert[]

  @@map("EFFICIENCY_TARGETS")
}

model Alert {
  alert_id                Int         @id @default(autoincrement())
  target_id               Int
  alert_timestamp         DateTime    @default(now())
  actual_value            Decimal     @db.Decimal(12, 2)
  target_value_at_trigger Decimal     @db.Decimal(12, 2)
  status                  AlertStatus @default(NEW)
  acknowledged_by_user_id Int?

  // Relations
  target          EfficiencyTarget @relation(fields: [target_id], references: [target_id])
  acknowledged_by User?            @relation(fields: [acknowledged_by_user_id], references: [user_id])

  @@map("ALERTS")
}

enum AlertStatus {
  NEW
  READ
  HANDLED
}

