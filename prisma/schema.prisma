// =============================================
// KONFIGURASI PRISMA
// =============================================

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  copyRuntime = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// =============================================
// MODUL 1: AUTENTIKASI & MANAJEMEN PENGGUNA
// - Mengelola pengguna, peran, dan hak akses.
// =============================================

model User {
  user_id           Int      @id @default(autoincrement())
  username          String   @unique
  password_hash     String
  photo_profile_url String?
  is_active         Boolean  @default(true)
  role_id           Int
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  role                  Role                 @relation(fields: [role_id], references: [role_id])
  notifications         Notification[]
  reading_sessions      ReadingSession[]
  price_schemes_set     PriceScheme[]
  efficiency_targets_set EfficiencyTarget[]
  alerts_acknowledged   Alert[]
  insights_acknowledged AnalyticsInsight[]
  edited_logbooks       DailyLogbook[]

  @@map("users")
}

model Role {
  role_id   Int      @id @default(autoincrement())
  role_name RoleName @unique
  users     User[]
  @@map("roles")
}

enum RoleName {
  Technician
  Admin
  SuperAdmin
}


// =============================================
// MODUL 2: MANAJEMEN ASET
// - Mendefinisikan aset fisik seperti meter, jenis energi, kategori, dan golongan tarif.
// =============================================

model Meter {
  meter_id        Int         @id @default(autoincrement())
  meter_code      String      @unique
  status          MeterStatus @default(Active)
  
  energy_type_id  Int
  energy_type     EnergyType  @relation(fields: [energy_type_id], references: [energy_type_id])

  category_id     Int
  category        MeterCategory @relation(fields: [category_id], references: [category_id])

  // Kunci: Setiap meter sekarang WAJIB memiliki golongan tarif untuk penentuan harga.
  tariff_group_id Int
  tariff_group    TariffGroup @relation(fields: [tariff_group_id], references: [tariff_group_id])

  reading_sessions ReadingSession[]
  daily_summaries  DailySummary[]
  insights         AnalyticsInsight[]
  predictions      ConsumptionPrediction[]
  classifications  DailyUsageClassification[]
  efficiency_targets EfficiencyTarget[]
  daily_logbooks   DailyLogbook[]

  @@map("meters")
}

model MeterCategory {
  category_id Int    @id @default(autoincrement())
  name        String @unique // e.g., "Listrik Terminal", "Listrik Perkantoran"

  allowed_reading_types ReadingType[] @relation("CategoryToReadingTypes")
  meters                Meter[]

  @@map("meter_categories")
}

model EnergyType {
  energy_type_id      Int      @id @default(autoincrement())
  type_name           String   @unique // e.g., "Listrik", "Air", "BBM"
  unit_of_measurement String   // e.g., "kWh", "m³", "Liter"
  is_active           Boolean  @default(true)

  meters          Meter[]
  reading_types   ReadingType[]
  summary_details SummaryDetail[]

  @@map("energy_types")
}

// BARU: Model ini untuk menyimpan data master golongan tarif listrik (kunci dari skema harga).
model TariffGroup {
  tariff_group_id Int     @id @default(autoincrement())
  group_code      String  @unique // e.g., "B2", "B3", "I3"
  group_name      String  // e.g., "Bisnis Tegangan Menengah"
  description     String?
  daya_va         Int?     // Int     
  faktor_kali     Int     @default(2)
  price_schemes PriceScheme[]
  meters        Meter[]

  @@map("tariff_groups")
}

enum MeterStatus {
  Active
  UnderMaintenance
  Inactive
  Deleted
}


// =============================================
// MODUL 3: PENCATATAN & PEMBACAAN METER
// - Mengelola proses input data harian dari setiap meter.
// =============================================

model ReadingSession {
  session_id   Int      @id @default(autoincrement())
  reading_date DateTime @db.Date
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  meter_id Int
  user_id  Int
  meter    Meter @relation(fields: [meter_id], references: [meter_id], onDelete: Cascade)
  user     User  @relation(fields: [user_id], references: [user_id])
  details  ReadingDetail[]

  @@unique([meter_id, reading_date], name: "unique_meter_reading_per_day")
  @@map("reading_sessions")
}

model ReadingDetail {
  detail_id       Int     @id @default(autoincrement())
  value           Decimal @db.Decimal(12, 2) // Nilai angka yang tercatat di meter
  session_id      Int
  reading_type_id Int

  session      ReadingSession @relation(fields: [session_id], references: [session_id], onDelete: Cascade)
  reading_type ReadingType    @relation(fields: [reading_type_id], references: [reading_type_id])

  @@unique([session_id, reading_type_id])
  @@map("reading_details")
}

model ReadingType {
  reading_type_id Int    @id @default(autoincrement())
  type_name       String @unique // e.g., "WBP", "LWBP", "Stand Meter"
  reading_unit    String // e.g., "kWh", "m³"
  
  energy_type_id Int
  energy_type    EnergyType @relation(fields: [energy_type_id], references: [energy_type_id])
  
  session_details ReadingDetail[]
  applicable_to_categories MeterCategory[] @relation("CategoryToReadingTypes")
  rates                      SchemeRate[] // Relasi baru ke tarif harga

  @@map("reading_types")
}


// =============================================
// MODUL 4: LOGIKA BISNIS & PENETAPAN HARGA
// - Mengelola skema harga, tarif, pajak, dan target efisiensi.
// =============================================

model PriceScheme {
  scheme_id       Int      @id @default(autoincrement())
  scheme_name     String   // e.g., "Tarif Listrik B2 Tahun 2025"
  effective_date  DateTime @db.Date
  is_active       Boolean  @default(true)
  set_by_user_id  Int
  
  // MODIFIKASI: Skema harga sekarang spesifik untuk satu Golongan Tarif.
  tariff_group_id Int
  tariff_group    TariffGroup @relation(fields: [tariff_group_id], references: [tariff_group_id])
  set_by_user     User        @relation(fields: [set_by_user_id], references: [user_id])
  rates           SchemeRate[]
  taxes           PriceSchemesOnTaxes[]

  @@unique([effective_date, tariff_group_id])
  @@map("price_schemes")
}

model SchemeRate {
  rate_id Int     @id @default(autoincrement())
  value   Decimal @db.Decimal(12, 4) // Harga per unit (e.g., 1444.70 per kWh)
  
  scheme_id       Int
  scheme          PriceScheme @relation(fields: [scheme_id], references: [scheme_id], onDelete: Cascade)

  // MODIFIKASI: Harga terikat langsung ke jenis pencatatan (WBP/LWBP).
  reading_type_id Int
  reading_type    ReadingType @relation(fields: [reading_type_id], references: [reading_type_id])

  @@unique([scheme_id, reading_type_id])
  @@map("scheme_rates")
}

model Tax {
  tax_id        Int      @id @default(autoincrement())
  tax_name      String   @unique
  rate          Decimal  @db.Decimal(5, 4) // e.g. 0.11 for 11%
  is_active     Boolean  @default(true)
  price_schemes PriceSchemesOnTaxes[]

  @@map("taxes")
}

model PriceSchemesOnTaxes {
  scheme_id    Int
  tax_id       Int
  price_scheme PriceScheme @relation(fields: [scheme_id], references: [scheme_id], onDelete: Cascade)
  tax          Tax         @relation(fields: [tax_id], references: [tax_id], onDelete: Cascade)

  @@id([scheme_id, tax_id])
  @@map("price_schemes_on_taxes")
}

model EfficiencyTarget {
  target_id      Int      @id @default(autoincrement())
  kpi_name       String
  target_value   Decimal  @db.Decimal(10, 2)
  target_cost    Decimal? @db.Decimal(10, 2)
  period_start   DateTime @db.Date
  period_end     DateTime @db.Date
  set_by_user_id Int

  meter_id       Int
  
  set_by_user User  @relation(fields: [set_by_user_id], references: [user_id])
  meter       Meter @relation(fields: [meter_id], references: [meter_id])
  alerts      Alert[]

  @@index([meter_id])
  @@map("efficiency_targets")
}


// =============================================
// MODUL 5: DATA PENDUKUNG OPERASIONAL
// - Menyimpan data kontekstual seperti jumlah penumpang (pax) dan logbook kejadian.
// =============================================

model PaxData {
  pax_id    Int      @id @default(autoincrement())
  data_date DateTime @unique @db.Date
  total_pax Int

  @@map("pax_data")
}

model DailyLogbook {
  log_id                  Int      @id @default(autoincrement())
  log_date                DateTime @db.Date
  meter_id                Int
  meter                   Meter    @relation(fields: [meter_id], references: [meter_id])

  // PERBAIKAN: Kolom generik untuk perubahan konsumsi
  consumption_change_percent Decimal? @db.Decimal(5, 2)

  // BARU: Analisis penghematan/pemborosan vs target
  savings_value           Decimal? @db.Decimal(12, 2) // Penghematan (kWh, m3)
  savings_cost            Decimal? @db.Decimal(15, 2) // Penghematan (Rp)
  overage_value           Decimal? @db.Decimal(12, 2) // Pemborosan (kWh, m3)
  overage_cost            Decimal? @db.Decimal(15, 2) // Pemborosan (Rp)

  // Catatan ringkasan yang digenerate oleh sistem
  summary_notes           String   @db.Text
  
  // (Opsional) Jika ada pengguna yang menambahkan catatan manual
  manual_notes            String?  @db.Text
  edited_by_user_id       Int?
  edited_by               User?    @relation(fields: [edited_by_user_id], references: [user_id])

  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  @@unique([log_date, meter_id]) // PERBAIKAN: Constraint baru
  @@map("daily_logbooks")
}


// =============================================
// MODUL 6: ANALITIK, LAPORAN & NOTIFIKASI
// - Hasil olahan data, seperti ringkasan harian, prediksi, alert, dan klasifikasi.
// =============================================

model DailySummary {
  summary_id   Int       @id @default(autoincrement())
  summary_date DateTime  @db.Date
  total_consumption Decimal? @db.Decimal(12, 2) // BARU: Tambahkan kolom ini
  total_cost   Decimal?  @db.Decimal(15, 2)
  meter_id     Int
  meter        Meter     @relation(fields: [meter_id], references: [meter_id])
  details      SummaryDetail[]
  classification DailyUsageClassification?

  @@unique([summary_date, meter_id])
  @@index([meter_id])
  @@map("daily_summaries")
}

model SummaryDetail {
  detail_id         Int      @id @default(autoincrement())
  current_reading   Decimal  @db.Decimal(12, 2)
  previous_reading  Decimal  @db.Decimal(12, 2)
  consumption_value Decimal  @db.Decimal(12, 2)
  consumption_cost  Decimal  @db.Decimal(15, 2)
  wbp_value         Decimal? @db.Decimal(12, 2)
  lwbp_value        Decimal? @db.Decimal(12, 2)
  metric_name       String
  summary_id        Int
  energy_type_id    Int

  summary     DailySummary @relation(fields: [summary_id], references: [summary_id], onDelete: Cascade)
  energy_type EnergyType   @relation(fields: [energy_type_id], references: [energy_type_id])

  @@unique([summary_id, energy_type_id, metric_name])
  @@map("summary_details")
}

model Alert {
  alert_id                  Int         @id @default(autoincrement())
  actual_value              Decimal     @db.Decimal(12, 2)
  target_value_at_trigger   Decimal     @db.Decimal(12, 2)
  status                    AlertStatus @default(NEW)
  alert_timestamp           DateTime    @default(now())
  target_id                 Int
  acknowledged_by_user_id   Int?

  target          EfficiencyTarget @relation(fields: [target_id], references: [target_id])
  acknowledged_by User?            @relation(fields: [acknowledged_by_user_id], references: [user_id])

  @@index([target_id])
  @@map("alerts")
}

model Notification {
  notification_id Int      @id @default(autoincrement())
  user_id         Int
  title           String
  message         String   @db.Text
  link            String?
  is_read         Boolean  @default(false)
  created_at      DateTime @default(now())
  
  user User @relation(fields: [user_id], references: [user_id])
  @@index([user_id])
}

model AnalyticsInsight {
  insight_id              Int             @id @default(autoincrement())
  insight_date            DateTime        @db.Date
  title                   String
  description             String          @db.Text
  severity                InsightSeverity @default(LOW)
  status                  InsightStatus   @default(NEW)
  source_data_ref         Json?
  created_at              DateTime        @default(now())
  meter_id                Int?
  acknowledged_by_user_id Int?
  
  meter           Meter? @relation(fields: [meter_id], references: [meter_id])
  acknowledged_by User?  @relation(fields: [acknowledged_by_user_id], references: [user_id])

  @@map("analytics_insights")
}

model ConsumptionPrediction {
  prediction_id          Int      @id @default(autoincrement())
  prediction_date        DateTime @db.Date
  predicted_value        Decimal  @db.Decimal(12, 2)
  confidence_lower_bound Decimal? @db.Decimal(12, 2)
  confidence_upper_bound Decimal? @db.Decimal(12, 2)
  model_version          String?
  created_at             DateTime @default(now())
  meter_id               Int
  
  meter Meter @relation(fields: [meter_id], references: [meter_id], onDelete: Cascade)

  @@unique([prediction_date, meter_id, model_version])
  @@map("consumption_predictions")
}

model DailyUsageClassification {
  classification_id   Int           @id @default(autoincrement())
  classification_date DateTime      @db.Date
  classification      UsageCategory @default(UNKNOWN)
  confidence_score    Float?
  model_version       String
  reasoning           String?       @db.Text
  created_at          DateTime      @default(now())
  meter_id            Int
  summary_id          Int           @unique

  summary DailySummary @relation(fields: [summary_id], references: [summary_id], onDelete: Cascade)
  meter   Meter        @relation(fields: [meter_id], references: [meter_id], onDelete: Cascade)

  @@unique([classification_date, meter_id])
  @@index([meter_id])
  @@map("daily_usage_classifications")
}

// --- Kumpulan Enum untuk Modul Analitik ---
enum AlertStatus {
  NEW
  READ
  HANDLED
}

enum InsightSeverity {
  LOW
  MEDIUM
  HIGH
}

enum InsightStatus {
  NEW
  ACKNOWLEDGED
  RESOLVED
}

enum UsageCategory {
  HEMAT
  NORMAL
  BOROS
  UNKNOWN
}